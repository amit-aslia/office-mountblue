{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amit\\\\Desktop\\\\postman\\\\postman-clone\\\\src\\\\SendRequest.js\";\nimport React, { Component } from 'react';\n\nclass SendRequest extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      testResult: []\n    };\n\n    this.userRequests = () => {\n      return this.props.httpData.map((request, index) => React.createElement(\"div\", {\n        key: index,\n        style: {\n          paddingLeft: '10px',\n          borderBottom: 'solid 1px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          color: \"green\",\n          textDecoration: \"none\",\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, request.method), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          maxWidth: \"80%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, \" \", request.url)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }), this.state.testResult.length !== 0 ? this.state.testResult[index] ? React.createElement(React.Fragment, null, \"Test-Result: \", React.createElement(\"span\", {\n        style: {\n          color: 'Green',\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Passed\")) : request.test === '' ? 'No Test Cases ' : React.createElement(React.Fragment, null, \"Test-Result: \", React.createElement(\"span\", {\n        style: {\n          color: 'Red',\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Failed\")) : null));\n    };\n\n    this.runCollection = async () => {\n      for (let i = 0; i < this.props.httpData.length; i++) {\n        await runFetch(this.props.httpData[i]).then(res => this.setState({\n          testResult: [...this.state.testResult, res]\n        }));\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"sendRequestForCollection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"runCollectionUrls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, this.userRequests()), React.createElement(\"button\", {\n      onClick: this.runCollection,\n      className: \"runCollectionButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Run Collection\"));\n  }\n\n}\n\nasync function runFetch(request) {\n  let result;\n\n  if (request.method === 'GET') {\n    await fetch(request.url, {\n      header: request.headers\n    }).then(res => res.json()).then(res => {\n      result = compareTestWithResponse(res, request.test);\n    }).catch(err => console.log(err));\n  } else {\n    await fetch(request.url, {\n      headers: request.headers,\n      method: request.method,\n      body: request.body\n    }).then(res => res.json()).then(res => {\n      result = compareTestWithResponse(res, request.test);\n    }).catch(err => console.log(err));\n  }\n\n  return result;\n}\n\nfunction compareTestWithResponse(result, test) {\n  let testCheck = JSON.parse(test);\n  let jsonKeyInTest = Object.keys(testCheck);\n  let jsonKeyInResult = Object.keys(result);\n\n  if (jsonKeyInResult.length !== jsonKeyInTest.length) {\n    return false;\n  } else {\n    for (let i = 0; i < jsonKeyInResult.length; i++) {\n      if (!jsonKeyInTest.includes(jsonKeyInResult[i])) {\n        return false;\n      }\n\n      if (testCheck[jsonKeyInResult[i]] !== result[jsonKeyInResult[i]]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport default SendRequest;","map":{"version":3,"sources":["C:/Users/Amit/Desktop/postman/postman-clone/src/SendRequest.js"],"names":["React","Component","SendRequest","state","testResult","userRequests","props","httpData","map","request","index","paddingLeft","borderBottom","color","textDecoration","fontWeight","method","maxWidth","url","length","test","runCollection","i","runFetch","then","res","setState","render","result","fetch","header","headers","json","compareTestWithResponse","catch","err","console","log","body","testCheck","JSON","parse","jsonKeyInTest","Object","keys","jsonKeyInResult","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass SendRequest extends Component {\r\n    state = {\r\n        testResult: []\r\n    }\r\n    userRequests = () => {\r\n        return this.props.httpData.map((request, index) => (<div key={index} style={{paddingLeft: '10px', borderBottom: 'solid 1px'}}>\r\n            <div\r\n                style={{ color: \"green\", textDecoration: \"none\", fontWeight: \"bold\" }}\r\n            >\r\n                {request.method}\r\n            </div>\r\n            <div>\r\n                <div style={{ maxWidth: \"80%\" }}> {request.url}</div>\r\n            </div>\r\n            <br />\r\n            {this.state.testResult.length !== 0 ?\r\n                (this.state.testResult[index] ? (<>Test-Result: <span style={{color: 'Green', fontWeight: 'bold'}}>Passed</span></>) : (request.test === '') ? 'No Test Cases ' : (<>Test-Result: <span style={{color: 'Red', fontWeight: 'bold'}}>Failed</span></>)) : null}\r\n        </div>))\r\n    }\r\n    runCollection = async () => {\r\n        for (let i = 0; i < this.props.httpData.length; i++) {\r\n            await runFetch(this.props.httpData[i])\r\n                .then(res => this.setState({ testResult: [...this.state.testResult, res] }));\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='sendRequestForCollection'>\r\n            <div className='runCollectionUrls'>{this.userRequests()}</div>\r\n            <button onClick={this.runCollection} className='runCollectionButton'>Run Collection</button>\r\n        </div>)\r\n    }\r\n}\r\n\r\nasync function runFetch(request) {\r\n    let result;\r\n    if (request.method === 'GET') {\r\n        await fetch(request.url,\r\n            { header: request.headers })\r\n            .then(res => (res.json()))\r\n            .then(res => {\r\n                result = (compareTestWithResponse(res, request.test));\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n    else {\r\n        await fetch(request.url, {\r\n            headers: request.headers,\r\n            method: request.method,\r\n            body: request.body\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                result = (compareTestWithResponse(res, request.test));\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction compareTestWithResponse(result, test) {\r\n\r\n    let testCheck = JSON.parse(test);\r\n    let jsonKeyInTest = Object.keys(testCheck);\r\n    let jsonKeyInResult = Object.keys(result);\r\n\r\n    if (jsonKeyInResult.length !== jsonKeyInTest.length) {\r\n        return false\r\n    }\r\n    else {\r\n        for (let i = 0; i < jsonKeyInResult.length; i++) {\r\n            if (!jsonKeyInTest.includes(jsonKeyInResult[i])) {\r\n                return false;\r\n            }\r\n            if (testCheck[jsonKeyInResult[i]] !== result[jsonKeyInResult[i]]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\nexport default SendRequest;"]},"metadata":{},"sourceType":"module"}