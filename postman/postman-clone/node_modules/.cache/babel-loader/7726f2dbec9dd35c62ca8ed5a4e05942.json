{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amit\\\\Desktop\\\\postman\\\\postman-clone\\\\src\\\\Components\\\\HttpRequest.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { httpHistory } from \"../store/actions/httpHistoryActions\";\nimport HttpRequestHeaders from \"./HttpRequestHeaders\";\nimport HttpRequestBody from \"./HttpRequestBody\";\nimport HttpResponse from \"./HttpResponse\";\nimport { Tabs, Tab, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nclass HttpRequest extends Component {\n  componentWillUpdate(nextProps, nextState) {\n    localStorage.setItem(this.props.index, JSON.stringify(nextState));\n  }\n\n  constructor() {\n    let savedState = localStorage.getItem(this.props.index);\n\n    if (savedState !== null) {\n      let savedStateObject = JSON.parse(savedState);\n      this.setState({\n        url: savedStateObject.url,\n        result: savedStateObject.result,\n        method: savedStateObject.method,\n        body: savedStateObject.body,\n        headerKeys: savedStateObject.headerKeys,\n        headerValues: savedStateObject.headerValues,\n        headers: savedStateObject.headers,\n        test: savedStateObject.test,\n        testOutput: savedStateObject.testOutput\n      });\n    }\n  }\n\n  componentWillReceiveProps() {\n    let history = this.props.historyData;\n\n    if (Object.keys(history).length !== 0) {\n      console.log(\"inside the component did mount and current tab\", this.props.previousTab, \"current index\", this.props.index);\n\n      if (this.props.location === 0) {\n        this.setState({\n          url: history.url,\n          method: history.method,\n          body: history.body,\n          headerKeys: history.headerKeys,\n          headerValues: history.headerValues,\n          headers: history.headers,\n          title: history.title\n        }, () => {\n          localStorage.setItem(this.props.index, JSON.stringify(this.state));\n        });\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"urlArea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"handleTitle\",\n      type: \"text\",\n      name: \"title\",\n      value: this.state.title,\n      onClick: this.handleTitle,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      onChange: this.handleSelectChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, this.state.method === \"GET\" ? React.createElement(\"option\", {\n      value: \"GET\",\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"GET\") : React.createElement(\"option\", {\n      value: \"GET\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"GET\"), this.state.method === \"POST\" ? React.createElement(\"option\", {\n      value: \"POST\",\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"POST\") : React.createElement(\"option\", {\n      value: \"POST\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"POST\"), this.state.method === \"PUT\" ? React.createElement(\"option\", {\n      value: \"PUT\",\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"PUT\") : React.createElement(\"option\", {\n      value: \"PUT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"PUT\"), this.state.method === \"DELETE\" ? React.createElement(\"option\", {\n      value: \"DELETE\",\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"DELETE\") : React.createElement(\"option\", {\n      value: \"DELETE\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"DELETE\")), React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Request URL\",\n      value: this.state.url,\n      onChange: this.handleUrlChange,\n      className: \"inputUrl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Send\",\n      className: \"sendButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }))), React.createElement(Tabs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(TabList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"Header\"), React.createElement(Tab, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Body\"), React.createElement(Tab, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Test\"), React.createElement(Tab, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Test Result\")), React.createElement(TabPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(HttpRequestHeaders, {\n      addHeader: e => {\n        this.addHeader(e);\n      },\n      handleHeaderRemove: index => {\n        this.handleHeaderRemove(index);\n      },\n      handleHeaderValueChange: (e, index) => {\n        this.handleHeaderValueChange(e, index);\n      },\n      handleHeaderKeyChange: (e, index) => {\n        this.handleHeaderKeyChange(e, index);\n      },\n      headerValues: this.state.headerValues,\n      headerKeys: this.state.headerKeys,\n      showHeader: this.state.showHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    })), React.createElement(TabPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(HttpRequestBody, {\n      body: this.state.body,\n      showBody: this.state.showBody,\n      handleBodyRawInputChange: e => {\n        this.handleBodyRawInputChange(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    })), React.createElement(TabPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"test-tab\",\n      placeholder: \"Test\",\n      value: this.state.test,\n      onChange: e => {\n        this.handleTestChange(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    })), React.createElement(TabPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"test-tab\",\n      placeholder: \"Test\",\n      value: this.state.testOutput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"response-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \"Response\"), React.createElement(HttpResponse, {\n      result: this.state.result,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    historyData: state.historyData,\n    tabHistory: state.tabHistory,\n    previousTab: state.currentTabId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    httpHistory: (newHttpData, auth) => dispatch(httpHistory(newHttpData, auth))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HttpRequest);","map":{"version":3,"sources":["C:/Users/Amit/Desktop/postman/postman-clone/src/Components/HttpRequest.jsx"],"names":["React","Component","connect","httpHistory","HttpRequestHeaders","HttpRequestBody","HttpResponse","Tabs","Tab","TabList","TabPanel","HttpRequest","componentWillUpdate","nextProps","nextState","localStorage","setItem","props","index","JSON","stringify","constructor","savedState","getItem","savedStateObject","parse","setState","url","result","method","body","headerKeys","headerValues","headers","test","testOutput","componentWillReceiveProps","history","historyData","Object","keys","length","console","log","previousTab","location","title","state","render","handleTitle","handleChange","handleFormSubmit","handleSelectChange","handleUrlChange","e","addHeader","handleHeaderRemove","handleHeaderValueChange","handleHeaderKeyChange","showHeader","showBody","handleBodyRawInputChange","handleTestChange","mapStateToProps","tabHistory","currentTabId","mapDispatchToProps","dispatch","newHttpData","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { httpHistory } from \"../store/actions/httpHistoryActions\";\r\nimport HttpRequestHeaders from \"./HttpRequestHeaders\";\r\nimport HttpRequestBody from \"./HttpRequestBody\";\r\nimport HttpResponse from \"./HttpResponse\";\r\nimport { Tabs, Tab, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\n\r\nclass HttpRequest extends Component {\r\n  state = {\r\n    url: \"\",\r\n    result: \"\",\r\n    method: \"GET\",\r\n    body: \"\",\r\n    headerKeys: [\"Content-Type\"],\r\n    headerValues: [\"application/json\"],\r\n    headers: {},\r\n    test: '',\r\n    testOutput: '',\r\n    title:'untitled'\r\n  };\r\n  componentWillUpdate(nextProps, nextState) {\r\n    localStorage.setItem(this.props.index, JSON.stringify(nextState));\r\n  }\r\n  constructor() {\r\n    let savedState = localStorage.getItem(this.props.index);\r\n    if (savedState !== null) {\r\n      let savedStateObject = JSON.parse(savedState);\r\n      this.setState({\r\n        url: savedStateObject.url,\r\n        result: savedStateObject.result,\r\n        method: savedStateObject.method,\r\n        body: savedStateObject.body,\r\n        headerKeys: savedStateObject.headerKeys,\r\n        headerValues: savedStateObject.headerValues,\r\n        headers: savedStateObject.headers,\r\n        test: savedStateObject.test,\r\n        testOutput: savedStateObject.testOutput\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n\r\n    let history = this.props.historyData;\r\n    if (Object.keys(history).length !== 0) {\r\n      console.log(\r\n        \"inside the component did mount and current tab\",\r\n        this.props.previousTab,\r\n        \"current index\",\r\n        this.props.index\r\n      );\r\n      if (this.props.location === 0) {\r\n        this.setState(\r\n          {\r\n            url: history.url,\r\n            method: history.method,\r\n            body: history.body,\r\n            headerKeys: history.headerKeys,\r\n            headerValues: history.headerValues,\r\n            headers: history.headers,\r\n            title:history.title\r\n\r\n          },\r\n          () => {\r\n            localStorage.setItem(this.props.index, JSON.stringify(this.state));\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  compareTestWithResponse = result => {\r\n    if (this.state.test.length === 0) {\r\n      this.setState({testOutput:\"No test case.\"})\r\n      return;\r\n    }\r\n\r\n    try \r\n    {\r\n      let test = JSON.parse(this.state.test);\r\n      if(test.length>=0)\r\n      {\r\n        for(let eachObjectInTest=0;eachObjectInTest<test.length;eachObjectInTest++)\r\n      {\r\n        let testCase=test[eachObjectInTest];\r\n        let resultCase=result[eachObjectInTest];\r\n        let jsonKeyinTest = Object.keys(testCase);\r\n        let jsonKeyInResult = Object.keys(resultCase);\r\n        if (jsonKeyInResult.length !== jsonKeyinTest.length) {\r\n          this.setState({\r\n            testOutput: \"Failed, length of test case and response not equal\"\r\n          });\r\n          break;\r\n        } else {\r\n          for (let i = 0; i < jsonKeyinTest.length; i++) {\r\n            console.log(i+\". result key\"+jsonKeyInResult[i]+\" , test key\"+jsonKeyinTest)\r\n            if (!jsonKeyInResult.includes(jsonKeyinTest[i])) {\r\n              this.setState({\r\n                testOutput: \"Failed \" + jsonKeyinTest[i] + \" not present in response\"\r\n              });\r\n  \r\n              break;\r\n            } else if (testCase[jsonKeyinTest[i]] !== resultCase[jsonKeyinTest[i]]) {\r\n              this.setState({\r\n                testOutput:\r\n                  \"Failed not equal properties of \" + jsonKeyInResult[i] + \"\"\r\n              });\r\n              break;\r\n            } else {\r\n              this.setState({ testOutput: \"Passed\" });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      }\r\n      else\r\n      {\r\n          let jsonKeyinTest = Object.keys(test);\r\n          let jsonKeyInResult = Object.keys(result);\r\n          if (jsonKeyInResult.length !== jsonKeyinTest.length) {\r\n            this.setState({\r\n              testOutput: \"Failed, length of test case and response not equal\"\r\n            });\r\n            return;\r\n          } else {\r\n            for (let i = 0; i < jsonKeyinTest.length; i++) {\r\n              if (!jsonKeyInResult.includes(jsonKeyinTest[i])) {\r\n                this.setState({\r\n                  testOutput: \"Failed \" + jsonKeyinTest[i] + \" not present in response\"\r\n                });\r\n    \r\n                return;\r\n              } else if (test[jsonKeyInResult[i]] !== result[jsonKeyInResult[i]]) {\r\n                this.setState({\r\n                  testOutput:\r\n                    \"Failed not equal properties of \" + jsonKeyInResult[i] + \"\"\r\n                });\r\n                return;\r\n              } else {\r\n                this.setState({ testOutput: \"Passed\" });\r\n              }\r\n            }\r\n          }\r\n        \r\n      }\r\n      \r\n    }\r\n     catch (err) \r\n     {\r\n      console.log(\"ERROR \"+err)\r\n      this.setState({ testOutput: \"Badly formatted test case.\" });\r\n    }\r\n  };\r\n  handleUrlChange = event => {\r\n    this.setState({ url: event.target.value });\r\n  };\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    if (this.state.url !== \"\") {\r\n      const headObj = {};\r\n      this.state.headerKeys.map((headerKey, index) => {\r\n        return (headObj[headerKey] = this.state.headerValues[index]);\r\n      });\r\n\r\n      this.setState({ headers: headObj }, () => {\r\n        this.props.httpHistory(this.state, this.props.auth);\r\n        console.log(this.state);\r\n        if (this.state.method === \"GET\") {\r\n          fetch(this.state.url, {\r\n            headers: this.state.headers\r\n          })\r\n            .then(a => a.json())\r\n            .then(result =>\r\n              this.setState({ result: JSON.stringify(result) }, () => {\r\n                this.compareTestWithResponse(result);\r\n              })\r\n            )\r\n            .catch(err => {\r\n            });\r\n        } else {\r\n          fetch(this.state.url, {\r\n            headers: this.state.headers,\r\n            method: this.state.method,\r\n            body: this.state.body\r\n          })\r\n            .then(a => a.json())\r\n            .then(result => this.setState({ result: JSON.stringify(result) }))\r\n            .catch(err => {\r\n            });\r\n        }\r\n      });\r\n    } else {\r\n      this.setState({ result: \"EMPTY URL\" });\r\n    }\r\n  };\r\n\r\n  handleSelectChange = event => {\r\n    this.setState({ method: event.target.value });\r\n  };\r\n\r\n  handleHeaderRemove = index => {\r\n    let updatedHeaderKeys = this.state.headerKeys;\r\n    let updatedHeaderValues = this.state.headerValues;\r\n    updatedHeaderKeys.splice(index, 1);\r\n    updatedHeaderValues.splice(index, 1);\r\n    this.setState({ headerKeys: updatedHeaderKeys });\r\n    this.setState({ headervalues: updatedHeaderValues });\r\n  };\r\n\r\n  handleHeaderKeyChange = (e, index) => {\r\n    let updatedHeaderKeys = this.state.headerKeys;\r\n    updatedHeaderKeys[index] = e.target.value;\r\n    this.setState({ headerKeys: updatedHeaderKeys });\r\n  };\r\n\r\n  handleHeaderValueChange = (e, index) => {\r\n    let updatedHeaderValues = this.state.headerValues;\r\n    updatedHeaderValues[index] = e.target.value;\r\n    this.setState({ headerValues: updatedHeaderValues });\r\n  };\r\n\r\n  addHeader = () => {\r\n    this.setState({ headerKeys: [...this.state.headerKeys, \"\"] });\r\n    this.setState({ headerValues: [...this.state.headerValues, \"\"] });\r\n  };\r\n  onClickHeader = () => {\r\n    this.setState({ showHeader: true, showBody: false });\r\n  };\r\n  onClickBody = () => {\r\n    this.setState({ showHeader: false, showBody: true });\r\n  };\r\n  handleBodyRawInputChange = e => {\r\n    this.setState({ body: e.target.value });\r\n  };\r\n  handleTestChange = e => {\r\n    this.setState({ test: e.target.value });\r\n  };\r\n  handleChange=(e)=>\r\n  {\r\n    this.setState({[e.target.name]:e.target.value})\r\n  }\r\nhandleTitle=()=>\r\n{\r\n  this.setState({title:''})\r\n}\r\n  render() {\r\n    return (\r\n      <div className=\"urlArea\">\r\n       \r\n      <input className=\"handleTitle\" type=\"text\" name='title' value={this.state.title} onClick={this.handleTitle} onChange={this.handleChange} />\r\n\r\n        <form onSubmit={this.handleFormSubmit}>\r\n          <div className=\"form-section\">\r\n            <select onChange={this.handleSelectChange}>\r\n              {this.state.method === \"GET\" ? (\r\n                <option value=\"GET\" selected>\r\n                  GET\r\n                </option>\r\n              ) : (\r\n                <option value=\"GET\">GET</option>\r\n              )}\r\n              {this.state.method === \"POST\" ? (\r\n                <option value=\"POST\" selected>\r\n                  POST\r\n                </option>\r\n              ) : (\r\n                <option value=\"POST\">POST</option>\r\n              )}\r\n              {this.state.method === \"PUT\" ? (\r\n                <option value=\"PUT\" selected>\r\n                  PUT\r\n                </option>\r\n              ) : (\r\n                <option value=\"PUT\">PUT</option>\r\n              )}\r\n              {this.state.method === \"DELETE\" ? (\r\n                <option value=\"DELETE\" selected>\r\n                  DELETE\r\n                </option>\r\n              ) : (\r\n                <option value=\"DELETE\">DELETE</option>\r\n              )}\r\n            </select>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter Request URL\"\r\n              value={this.state.url}\r\n              onChange={this.handleUrlChange}\r\n              className=\"inputUrl\"\r\n            />\r\n            <input type=\"submit\" value=\"Send\" className=\"sendButton\" />\r\n          </div>\r\n        </form>\r\n\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>Header</Tab>\r\n            <Tab>Body</Tab>\r\n\r\n            <Tab>Test</Tab>\r\n            <Tab>Test Result</Tab>\r\n          </TabList>\r\n          <TabPanel>\r\n            <HttpRequestHeaders\r\n              addHeader={e => {\r\n                this.addHeader(e);\r\n              }}\r\n              handleHeaderRemove={index => {\r\n                this.handleHeaderRemove(index);\r\n              }}\r\n              handleHeaderValueChange={(e, index) => {\r\n                this.handleHeaderValueChange(e, index);\r\n              }}\r\n              handleHeaderKeyChange={(e, index) => {\r\n                this.handleHeaderKeyChange(e, index);\r\n              }}\r\n              headerValues={this.state.headerValues}\r\n              headerKeys={this.state.headerKeys}\r\n              showHeader={this.state.showHeader}\r\n            />\r\n          </TabPanel>\r\n          <TabPanel>\r\n            <HttpRequestBody\r\n              body={this.state.body}\r\n              showBody={this.state.showBody}\r\n              handleBodyRawInputChange={e => {\r\n                this.handleBodyRawInputChange(e);\r\n              }}\r\n            />\r\n          </TabPanel>\r\n          <TabPanel>\r\n            <textarea\r\n              className=\"test-tab\"\r\n              placeholder={\"Test\"}\r\n              value={this.state.test}\r\n              onChange={e => {\r\n                this.handleTestChange(e);\r\n              }}\r\n            />\r\n          </TabPanel>\r\n          <TabPanel>\r\n            <textarea\r\n              className=\"test-tab\"\r\n              placeholder={\"Test\"}\r\n              value={this.state.testOutput}\r\n            />\r\n          </TabPanel>\r\n        </Tabs>\r\n        <div className=\"response-label\">Response</div>\r\n        <HttpResponse result={this.state.result} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    historyData: state.historyData,\r\n    tabHistory: state.tabHistory,\r\n    previousTab: state.currentTabId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    httpHistory: (newHttpData, auth) => dispatch(httpHistory(newHttpData, auth))\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(HttpRequest);\r\n"]},"metadata":{},"sourceType":"module"}