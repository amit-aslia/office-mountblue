{"ast":null,"code":"export const signIn = credentials => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(() => {\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'LOGIN_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const signOut = () => {\n  localStorage;\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: 'SIGNOUT_SUCCESS'\n      });\n    });\n  };\n};\nexport const signUp = newUser => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password).then(resp => {\n      return firestore.collection('users').doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName\n      });\n    }).then(() => {\n      dispatch({\n        type: 'SIGNUP_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'SIGNUP_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const addAuthId = (uid, name) => {\n  return (dispatch, getState, {\n    getFirestore,\n    getFirebase\n  }) => {\n    const firestore = getFirestore();\n    return firestore.collection('users').doc(uid).set({\n      firstName: name[0],\n      lastName: name[1]\n    }).then(() => {\n      dispatch({\n        type: 'GOOGLESIGNiN'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'GOOGLESIGNIN_ERROR'\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Amit/Desktop/postman/postman-clone/src/store/actions/authAction.js"],"names":["signIn","credentials","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","then","type","catch","err","signOut","localStorage","signUp","newUser","getFirestore","firestore","createUserWithEmailAndPassword","resp","collection","doc","user","uid","set","firstName","lastName","addAuthId","name"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAIC,WAAD,IAAiB;AACrC,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA;AAAF,GAArB,KAAyC;AAC9C,UAAMC,QAAQ,GAAGD,WAAW,EAA5B;AAEAC,IAAAA,QAAQ,CACLC,IADH,GAEGC,0BAFH,CAE8BN,WAAW,CAACO,KAF1C,EAEiDP,WAAW,CAACQ,QAF7D,EAGGC,IAHH,CAGQ,MAAM;AACVR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KALH,EAMGC,KANH,CAMUC,GAAD,IAAS;AACdX,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,aAAR;AAAuBE,QAAAA;AAAvB,OAAD,CAAR;AACD,KARH;AASD,GAZD;AAaD,CAdM;AAgBP,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3BC,EAAAA,YAAY;AACZ,SAAO,CAACb,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA;AAAF,GAArB,KAAyC;AAC9C,UAAMC,QAAQ,GAAGD,WAAW,EAA5B;AACAC,IAAAA,QAAQ,CACLC,IADH,GAEGQ,OAFH,GAGGJ,IAHH,CAGQ,MAAM;AACVR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KALH;AAMD,GARD;AASD,CAXM;AAaP,OAAO,MAAMK,MAAM,GAAIC,OAAD,IAAa;AACjC,SAAO,CAACf,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA,WAAF;AAAec,IAAAA;AAAf,GAArB,KAAuD;AAC5D,UAAMb,QAAQ,GAAGD,WAAW,EAA5B;AACA,UAAMe,SAAS,GAAGD,YAAY,EAA9B;AACAb,IAAAA,QAAQ,CACLC,IADH,GAEGc,8BAFH,CAEkCH,OAAO,CAACT,KAF1C,EAEiDS,OAAO,CAACR,QAFzD,EAGGC,IAHH,CAGSW,IAAD,IAAU;AACd,aAAOF,SAAS,CACbG,UADI,CACO,OADP,EAEJC,GAFI,CAEAF,IAAI,CAACG,IAAL,CAAUC,GAFV,EAGJC,GAHI,CAGA;AACHC,QAAAA,SAAS,EAAEV,OAAO,CAACU,SADhB;AAEHC,QAAAA,QAAQ,EAAEX,OAAO,CAACW;AAFf,OAHA,CAAP;AAOD,KAXH,EAYGlB,IAZH,CAYQ,MAAM;AACVR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAdH,EAeGC,KAfH,CAeUC,GAAD,IAAS;AACdX,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,cAAR;AAAwBE,QAAAA;AAAxB,OAAD,CAAR;AACD,KAjBH;AAkBD,GArBD;AAsBD,CAvBM;AAyBP,OAAO,MAAMgB,SAAS,GAAG,CAACJ,GAAD,EAAMK,IAAN,KAAe;AACtC,SAAO,CAAC5B,QAAD,EAAWC,QAAX,EAAqB;AAAEe,IAAAA,YAAF;AAAgBd,IAAAA;AAAhB,GAArB,KAAuD;AAC5D,UAAMe,SAAS,GAAGD,YAAY,EAA9B;AACA,WAAOC,SAAS,CACbG,UADI,CACO,OADP,EAEJC,GAFI,CAEAE,GAFA,EAGJC,GAHI,CAGA;AACHC,MAAAA,SAAS,EAAEG,IAAI,CAAC,CAAD,CADZ;AAEHF,MAAAA,QAAQ,EAAEE,IAAI,CAAC,CAAD;AAFX,KAHA,EAOJpB,IAPI,CAOC,MAAM;AACVR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KATI,EAUJC,KAVI,CAUGC,GAAD,IAAS;AACdX,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAZI,CAAP;AAaD,GAfD;AAgBD,CAjBM","sourcesContent":["export const signIn = (credentials) => {\r\n  return (dispatch, getState, { getFirebase }) => {\r\n    const firebase = getFirebase();\r\n\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(credentials.email, credentials.password)\r\n      .then(() => {\r\n        dispatch({ type: 'LOGIN_SUCCESS' });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({ type: 'LOGIN_ERROR', err });\r\n      });\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  localStorage\r\n  return (dispatch, getState, { getFirebase }) => {\r\n    const firebase = getFirebase();\r\n    firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(() => {\r\n        dispatch({ type: 'SIGNOUT_SUCCESS' });\r\n      });\r\n  };\r\n};\r\n\r\nexport const signUp = (newUser) => {\r\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n    const firebase = getFirebase();\r\n    const firestore = getFirestore();\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(newUser.email, newUser.password)\r\n      .then((resp) => {\r\n        return firestore\r\n          .collection('users')\r\n          .doc(resp.user.uid)\r\n          .set({\r\n            firstName: newUser.firstName,\r\n            lastName: newUser.lastName\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: 'SIGNUP_SUCCESS' });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({ type: 'SIGNUP_ERROR', err });\r\n      });\r\n  };\r\n};\r\n\r\nexport const addAuthId = (uid, name) => {\r\n  return (dispatch, getState, { getFirestore, getFirebase }) => {\r\n    const firestore = getFirestore();\r\n    return firestore\r\n      .collection('users')\r\n      .doc(uid)\r\n      .set({\r\n        firstName: name[0],\r\n        lastName: name[1]\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: 'GOOGLESIGNiN' });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({ type: 'GOOGLESIGNIN_ERROR' });\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}